import { Hero } from '../../atoms/Hero'
import { Text } from '../../atoms/Text'
import { Container, VideoIFrame, VideoWrapper } from './styles'
import heroImg from '@/presentation/assets/hero.png'
import vitestHeroImg from '@/presentation/assets/vitest.jpg'

export function HomeTemplate() {
  return (
    <>
      <Hero
        src={heroImg}
      />
      <Container>
        <div>
          <Text>
            Given Jest's massive adoption, Vitest provides a compatible API that allows you to use it as a drop-in
            replacement in most projects. It also includes the most common features required when setting up your
            unit tests (mocking, snapshots, coverage). Vitest cares a lot about performance and uses Worker threads
            to run as much as possible in parallel. Some ports have seen test running an order of magnitude faster.
            Watch mode is enabled by default, aligning itself with the way Vite pushes for a dev first experience.
            Even with all these improvements in DX, Vitest stays lightweight by carefully choosing its dependencies
            (or directly inlining needed pieces).
          </Text>
          <Hero src={vitestHeroImg} />
        </div>
        <div>
          <VideoWrapper>
            <VideoIFrame
              src="https://www.youtube.com/embed/SeVF1OFy5_I"
              title="YouTube video player"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              frameBorder="0"
              allowFullScreen
            />
          </VideoWrapper>
          <Text>
            Vanilla Extract is a CSS framework that lets you create class styles with TypeScript.
            It combines the utility class approach of something like Tailwind with the type-safety of TypeScript,
            allowing you to create your own custom yet consistent styles. Styles generated by Vanilla Extract are
            locally scoped, and compile to a single stylesheet at build time.
          </Text>
        </div>
      </Container>
    </>
  )
}
